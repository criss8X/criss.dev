---
import { cva, type VariantProps } from "class-variance-authority";
import { cn } from "@/lib/utils";

const cardVariants = cva("", {
  variants: {
    variant: {
      root: "bg-card/50 text-card-foreground flex flex-col gap-6 rounded-xl border border-border/50 py-6 shadow-sm",
      header:
        "@container/card-header grid auto-rows-min grid-rows-[auto_auto] items-start gap-1.5 px-6 has-data-[slot=card-action]:grid-cols-[1fr_auto] [.border-b]:pb-6",
      footer: "flex items-center px-6 [.border-t]:pt-6",
      description: "text-muted-foreground text-sm",
      content: "px-6",
      action: "col-start-2 row-span-2 row-start-1 self-start justify-self-end",
      title: "leading-none font-semibold",
    },
  },
  defaultVariants: {
    variant: "root",
  },
});

interface Props {
  className?: string;
  hasShine?: boolean;
  variant?: VariantProps<typeof cardVariants>["variant"];
}

const { className, variant, hasShine } = Astro.props;

const dataSlot = variant === "root" ? "card" : `card-${variant}`;
---

<div
  data-slot={dataSlot}
  class={cn(
    hasShine &&
      "group overflow-hidden relative hover:border-purple-400/50 transition-all duration-300",
    cardVariants({ variant }),
    className,
  )}
>
  {
    hasShine && (
      <div
        class="absolute inset-0 opacity-0 group-hover:opacity-100 transition-opacity duration-500 pointer-events-none"
        style={{
          background: `linear-gradient(to top, rgba(147, 51, 234, 0.2) 0%, rgba(168, 85, 247, 0.15) 30%, transparent 70%)`,
        }}
      />
    )
  }

  <slot />
</div>
